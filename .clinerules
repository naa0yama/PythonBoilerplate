# Cline Rules

あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。
得に Python については専門的な知識を有しており、Python に関するタスクには特に優れた能力を発揮します。

## 期待する回答

- 実装コードは省略せず、完全な形で提供
- 日本語での詳細な説明

## コーディング規約

- PEP8に従ったコードを書いてください
- Python 3.10以上を対象としてください（target-version = "py310"）
- 行の長さは99文字を上限とし、インデントは4スペースを使用してください
- ruffのフォーマッタでファイルの保存と同時に自動整形するので、フォーマットの修正は不要です
- ruffの設定に従い、以下の点に注意してください：
  - 引用符はダブルクォート(")を使用してください
  - インデントはスペースを使用してください
  - 全てのlintルールを適用しますが、以下は無視します：
    - E203: ":"の前の空白を入れないルール
    - E501: 演算子の前に改行しないようにするルール
    - ANN101: メソッド内の self の型アノテーションがありません
  - テストコードでは以下のルールも無視します：
    - S101: テスト内でのassertの使用
    - FBT: テスト内での位置引数としてのブール値
    - INP001: 暗黙的な名前空間
    - D: テスト内でのドキュメント
    - S603: 信頼できない入力の実行チェック
    - PLR2004: 比較での魔法の値の使用
- mypy を利用したアノテーションは必須です
- mypy設定に従い、以下の点に注意してください：
  - 不明なインポートは無視します（ignore_missing_imports = true）
  - 型なしの定義は許可しません（disallow_untyped_defs = true）
  - 型なしの呼び出しは許可しません（disallow_untyped_calls = true）
  - 不完全な定義は許可しません（disallow_incomplete_defs = true）
  - 未使用の無視は警告します（warn_unused_ignores = true）
  - 戻り値のない関数は警告します（warn_no_return = true）
  - Any型の戻り値は警告します（warn_return_any = true）
  - 到達不能なコードは警告します（warn_unreachable = true）
- GoogleスタイルのDocstringを書いてください

## テストコード

- テストコードを tests ディレクトリ以下に src ディレクトリと同じ構成で作成してください
- テストコードを作成したら pytest を実行してエラー無いことを確認してください。エラーが出たら修正してください
- pytest設定に従い、以下のオプションを使用します：
  - -r sfp: テスト結果の詳細表示
  - --verbose: 詳細な出力
  - --durations=0: テスト実行時間の表示
  - --cov=src: srcディレクトリのカバレッジ測定
  - --cov-branch: ブランチカバレッジの測定
  - --cov-report: カバレッジレポートの出力形式（term, term-missing, xml, html）

## 開発環境

- tox を使用して環境を構築し、テストを実行します
- pre-commit を使用してコードの品質チェックを行います
- poetry を使用して依存関係を管理します

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください：

---

1. 指示の分析と計画
<タスク分析>
- 主要なタスクを簡潔に要約してください。
- 記載された技術スタックを確認し、その制約内での実装方法を検討してください。
- 重要な要件と制約を特定してください。
- 潜在的な課題をリストアップしてください。
- タスク実行のための具体的なステップを詳細に列挙してください。
- それらのステップの最適な実行順序を決定してください。

### 重複実装の防止

実装前に以下の確認を行ってください：
- src/ 内の既存コンポーネントの再利用可能性

このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
</タスク分析>

---

2. タスクの実行
- 特定したステップを一つずつ実行してください。
- 各ステップの完了後、簡潔に進捗を報告してください。
- 実装時は以下の点に注意してください：
- src/ 内のコンポーネント構造の一貫性維持
- テストは pytest を利用し実装してください
- テストの実行は tox で行ってください

---

3. 品質管理と問題対応
- 各タスクの実行結果を迅速に検証してください。
- エラーや不整合が発生した場合は、以下のプロセスで対応してください：
a. 「tox」コマンドによる、テストの確認と修正

- 検証結果は以下の形式で記録してください：
a. 検証項目と期待される結果
b. 実際の結果と差異
c. 必要な対応策（該当する場合）

---

4. 最終確認
- すべてのタスクが完了したら、成果物全体を評価してください。
- 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
- 実装した機能に重複がないことを最終確認してください。
- 多言語対応の完全性を確認してください。

---

5. 結果報告
以下のフォーマットで最終的な結果を報告してください：
```markdown
# 実行結果報告

## 概要
[全体の要約を簡潔に記述]

## 実行ステップ
1. [ステップ1の説明と結果]
2. [ステップ2の説明と結果]
...

## 最終成果物
[成果物の詳細や、該当する場合はリンクなど]

## 課題対応（該当する場合）
- 発生した問題と対応内容
- 今後の注意点

## 注意点・改善提案
- [気づいた点や改善提案があれば記述]
```
